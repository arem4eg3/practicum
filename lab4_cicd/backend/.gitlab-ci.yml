stages:
  - build
  - test
  - upload
  - deploy
  - notify

# Выносим в отдельный блок переменные
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  SAST_JAVA_VERSION: 16
  ARTIFACT_PATH: ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
  
# Используем механизм кэширования
cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

# Сборка бэкенда    
build-backend-code-job:
  stage: build  
  script:
    - cd backend
    -  mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}    

# Запуск проверки безопасности SAST
semgrep-sast:
  stage: test
  needs: 
    - build-backend-code-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml


# Запуск проверки Сонаром
sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16      
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0" 
  script:
    - cd backend
    - |
      mvn verify sonar:sonar \
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK} \
      -Dsonar.host.url=${SONARQUBE_URL} \
      -Dsonar.login=${SONAR_LOGIN_BACK} \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK}
  needs: 
    - build-backend-code-job    

# загружаем собранный jar в Nexus
upload-backend-release:
  stage: upload
  needs:
    - semgrep-sast
    - sonarqube-backend-sast
  script:
    - cd backend
    - mvn deploy -DskipTests -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -s settings.xml -Dversion.application=${VERSION} 

# Деплой нового бэкенда на виртуальную машину.
deploy-backend:
  stage: deploy
  needs:
    - upload-backend-release
  script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - chmod 600 $SSH_PRIVATE_KEY    
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${DEV_USER}@${DEV_HOST} " 
      export "CURRENT_VERSION=${VERSION}"; 
      export "VERSION=${VERSION}"; 
      export "DEV_HOST=${DEV_HOST}"; 
      export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; 
      export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}"; 
      export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; 
      export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; 
      bash -s " < backend/deploy.sh 
  environment: 
    name: review/$CI_COMMIT_REF_NAME-backend
    url: http://${DEV_HOST}
    auto_stop_in: 1 week
  rules:
    - when: manual

# Отправка сообщения в Telegram с ссылкой на артефакт
telegram-notification-backend:
  stage: notify
  script:
    - |      
      curl -X POST -H 'Content-type: application/json' --data \
      '{"chat_id": "-1002100383038", "text": "New backend version, can download here '$ARTIFACT_PATH'" }' \
      https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage
  needs:
    - upload-backend-release
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
    