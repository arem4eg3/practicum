stages:
  - build
  - test
  - upload
  - deploy
  - notify

# Выносим в отдельный блок переменные 
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  ARTIFACT_PATH: ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/sausage-store-${VERSION}.tar.gz

# Используем механизм кэширования
cache:
  paths:
    - frontend/dist/frontend

# Сборка frontend
build-frontend-code-job:
  stage: build 
  script:        
    - cd frontend
    - npm install
    - npm run build 


# Запуск проверки Сонаром
sonarqube-frontend-sast:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0"
  needs: 
    - build-frontend-code-job
  script:
    - cd frontend
    - |
        sonar-scanner \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT} \
        -Dsonar.sources=. \
        -Dsonar.host.url=${SONARQUBE_URL} \
        -Dsonar.login=${SONAR_LOGIN_FRONT} \
        -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONT} 
          
# загружаем собранный agular в Nexus
upload-frontend-release:
  stage: upload
  needs:
    - sonarqube-frontend-sast
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/sausage-store-${VERSION}.tar.gz 

# Деплой нового frontend на виртуальную машину.         
deploy-frontend:
  stage: deploy
  needs:
    - upload-frontend-release
  script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - chmod 600 $SSH_PRIVATE_KEY    
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./frontend/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${DEV_USER}@${DEV_HOST} " 
      export "CURRENT_VERSION=${VERSION}"; 
      export "VERSION=${VERSION}"; 
      export "DEV_HOST=${DEV_HOST}"; 
      export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; 
      export "NEXUS_REPO_FRONTEND_NAME=${NEXUS_REPO_FRONTEND_NAME}"; 
      export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; 
      export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; 
      bash -s " < frontend/deploy.sh
  environment: 
    name: review/$CI_COMMIT_REF_NAME-frontend
    url: http://${DEV_HOST}
    auto_stop_in: 1 week
  rules:
    - when: manual

# Отправка сообщения в Telegram с ссылкой на артефакт
telegram-notification-frontend:
  stage: notify
  script:
    - |      
      curl -X POST -H 'Content-type: application/json' --data \
      '{"chat_id": "-1002100383038", "text": "New frontend version, can download here '$ARTIFACT_PATH'" }' \
      https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage
  needs:
    - upload-frontend-release 
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/    