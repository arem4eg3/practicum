stages:
  - build
  - test
  - release
  - deploy
  - notify

# Выносим в отдельный блок переменные
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  SAST_JAVA_VERSION: 16
  ARTIFACT_PATH: ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
  

# Используем механизм кэширования
cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

# Сборка бэкенда    
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHORT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

# Запуск проверки безопасности SAST
semgrep-sast:
  stage: test
  needs: 
    - build
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml


# Запуск проверки Сонаром
sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16      
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0" 
  script:
    - cd backend
    - |
      mvn verify sonar:sonar \
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK} \
      -Dsonar.host.url=${SONARQUBE_URL} \
      -Dsonar.login=${SONAR_LOGIN_BACK} \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK} \
      -Dmaven.test.skip=true 
  needs: 
    - build

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHORT_SHA $VERSION
  needs: 
    - build


#Деплой нового бэкенда .
deploy-backend:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add openssh-client bash
    - chmod 600 $SSH_PRIVATE_KEY
  script:   
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${DEV_USER}@${DEV_HOST} "
      export "VERSION=${VERSION}"; 
      export "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}";
      export "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}";
      export "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}";
      export "SPRING_DATA_MONGODB_URI=${SPRING_DATA_MONGODB_URI}";
      export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
      export "CI_REGISTRY=${CI_REGISTRY}";
      export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      bash -s " < backend/deploy.sh 
  needs:
    - release
  rules:
    - when: manual

# Отправка сообщения в Telegram с ссылкой на артефакт
telegram-notification-backend:
  stage: notify
  script:
    - |      
      curl -X POST -H 'Content-type: application/json' --data \
      '{"chat_id": "-1002100383038", "text": "New backend version" }' \
      https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage
  needs:
    - release
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/    