stages:
  - build
  - test
  - release
  - deploy
  - notify

# Выносим в отдельный блок переменные 
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  ARTIFACT_PATH: ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/sausage-store-${VERSION}.tar.gz

# Используем механизм кэширования
cache:
  paths:
    - frontend/dist/frontend

# Сборка frontend
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHORT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true


# Запуск проверки Сонаром
sonarqube-frontend-sast:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0"
  needs: 
    - build
  script:
    - cd frontend
    - |
        sonar-scanner \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT} \
        -Dsonar.sources=. \
        -Dsonar.host.url=${SONARQUBE_URL} \
        -Dsonar.login=${SONAR_LOGIN_FRONT} \
        -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONT} 
          
release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHORT_SHA $VERSION
  needs: 
    - sonarqube-frontend-sast

# Деплой нового frontend . 
deploy-frontend:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add openssh-client bash
    - chmod 600 $SSH_PRIVATE_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${DEV_USER}@${DEV_HOST} "id"
    #- ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${DEV_USER}@${DEV_HOST} "mkdir -p /tmp/${CI_PROJECT_DIR}/frontend/"
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./frontend/default.conf ${DEV_USER}@${DEV_HOST}:/tmp/default.conf     
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ${DEV_USER}@${DEV_HOST} "
      export "VERSION=${VERSION}";       
      export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
      export "CI_REGISTRY=${CI_REGISTRY}";
      export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      export "CI_PROJECT_DIR=${CI_PROJECT_DIR}";
      bash -s " < frontend/deploy.sh 
  needs:
    - release
  rules:
    - when: manual  

#Отправка сообщения в Telegram
telegram-notification-frontend:
  stage: notify
  script:
    - |      
      curl -X POST -H 'Content-type: application/json' --data \
      '{"chat_id": "-1002100383038", "text": "New frontend version" }' \
      https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage
  needs:
    - release 
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/   
    